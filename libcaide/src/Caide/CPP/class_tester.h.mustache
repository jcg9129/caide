#include "test_util.h"
{{#type_is_leetcode}}
#include "predefined/leetcode_predefined.h"
{{/type_is_leetcode}}
#include <istream>
#include <ostream>
#include <string>
#include <queue>
#include <vector>

{{#solutionClass}}
class {{className}};
{{/solutionClass}}

namespace caide_tester {

{{#type_is_leetcode}}
template <>
inline void deletePointer(ListNode*& p) {
    // Getting a crash here? You might be reusing input nodes for output.
    // Remove deletePointer() call in the destructor up the stack.
    while (p != 0) {
        ListNode* n = p->next;
        delete p;
        p = n;
    }
}

template <>
struct Serializer<ListNode*> {
    using VecSerializer = Serializer<std::vector<int> >;
    static void writeStructured(std::ostream& out, ListNode* val) {
        std::vector<int> vals;
        while (val != 0) {
            vals.push_back(val->val);
            val = val->next;
        }

        VecSerializer::writeStructured(out, vals);
    }

    static ListNode* readPlain(std::istream& in) {
        std::vector<int> vals = VecSerializer::readPlain(in);

        ListNode* head = 0;
        ListNode* tail = 0;

        struct ScopeGuard {
            ListNode** p;
            ~ScopeGuard() { if (p) deletePointer(*p); }
        } deleteOnException{&head};

        for (std::size_t i = 0; i < vals.size(); ++i) {
            if (i == 0) {
                head = new ListNode();
                tail = head;
            } else {
                tail->next = new ListNode();
                tail = tail->next;
            }

            tail->val = vals[i];
            tail->next = 0;
        }

        deleteOnException.p = 0;
        return head;
    }
};

template <>
inline void deletePointer(TreeNode*& p) {
    // Getting a crash here? You might be reusing input nodes for output.
    // Remove deletePointer() call in the destructor up the stack.
    if (p != 0) {
        deletePointer(p->left);
        deletePointer(p->right);
        delete p;
        p = 0;
    }
}

template <>
struct Serializer<TreeNode*> {
    static void writeStructured(std::ostream& out, TreeNode* val) {
        std::vector<TreeNode*> byLayer, currentLayer;
        currentLayer.push_back(val);
        while (!currentLayer.empty()) {
            std::vector<TreeNode*> nextLayer;
            for (TreeNode* node : currentLayer) {
                byLayer.push_back(node);
                if (node) {
                    nextLayer.push_back(node->left);
                    nextLayer.push_back(node->right);
                }
            }

            currentLayer.swap(nextLayer);
        }

        while (!byLayer.empty() && !byLayer.back())
            byLayer.pop_back();

        out << '[';
        for (std::size_t i = 0; i < byLayer.size(); ++i) {
            if (i > 0)
                out << ", ";

            if (byLayer[i])
                out << byLayer[i]->val;
            else
                out << "null";
        }

        out << ']';
    }

    static int readInt(const std::string& s) {
        std::istringstream in(s);
        int res;
        in >> res;
        return res;
    }

    static TreeNode* readPlain(std::istream& in) {
        int length = Serializer<int>::readPlain(in);
        if (length == 0)
            return nullptr;
        TreeNode* root = new TreeNode();

        struct ScopeGuard {
            TreeNode** p;
            ~ScopeGuard() { if (p) deletePointer(*p); }
        } deleteOnException{&root};

        root->val = Serializer<int>::readPlain(in);
        std::queue<TreeNode*> q;
        q.push(root);
        --length;
        std::string line;
        while (length > 0) {
            TreeNode* node = q.front();
            q.pop();
            std::getline(in, line);
            --length;
            if (line != "null") {
                node->left = new TreeNode(readInt(line));
                q.push(node->left);
            }

            if (length > 0) {
                std::getline(in, line);
                --length;
                if (line != "null") {
                    node->right = new TreeNode(readInt(line));
                    q.push(node->right);
                }
            }
        }

        deleteOnException.p = 0;
        return root;
    }
};
{{/type_is_leetcode}}

{{#solutionClass}}
{{#methods}}
struct Method_{{method.name}} {
{{#parameters}}
    {{>cpptype}} i_{{name}};
{{/parameters}}
{{#method}}
    {{>cpptype}} o_{{name}};
{{/method}}

    Method_{{method.name}}() {
{{#parameters}}
{{#dimension_is_0}}
{{^type_is_string}}        i_{{name}} = 0;{{/type_is_string}}
{{/dimension_is_0}}
{{/parameters}}
{{#method}}
{{#dimension_is_0}}
{{^type_is_string}}        o_{{name}} = 0;{{/type_is_string}}
{{/dimension_is_0}}
{{/method}}
    }

    void readInputs(std::istream& in) {
{{#parameters}}
        deletePointer(i_{{name}});
        readPlain(in, i_{{name}});
{{/parameters}}
    }

    void writeInputs(std::ostream& out) {
{{#parameters}}
        writeStructured(out, i_{{name}});
{{/parameters}}
    }

    void readOutput(std::istream& in) {
{{#method}}
        deletePointer(o_{{name}});
        readPlain(in, o_{{name}});
{{/method}}
    }

    void writeOutput(std::ostream& out) {
        writeStructured(out, o_{{method.name}});
    }

    void call({{className}}*& solution);

    ~Method_{{method.name}}() {
{{#parameters}}
        deletePointer(i_{{name}});
{{/parameters}}
        deletePointer(o_{{method.name}});
    }
};

{{/methods}}
{{#constructor}}
struct Method_{{className}} {
{{#parameters}}
  {{>cpptype}} i_{{name}};
{{/parameters}}
    void* o_{{className}};

    Method_{{className}}() {
{{#parameters}}
{{#dimension_is_0}}
{{^type_is_string}}        i_{{name}} = 0;{{/type_is_string}}
{{/dimension_is_0}}
{{/parameters}}
        o_{{className}} = 0;
    }

    void readInputs(std::istream& in) {
{{#parameters}}
        deletePointer(i_{{name}});
        readPlain(in, i_{{name}});
{{/parameters}}
    }

    void writeInputs(std::ostream& out) {
{{#parameters}}
        writeStructured(out, i_{{name}});
{{/parameters}}
    }

    void readOutput(std::istream& in) {
        readPlain(in, o_{{className}});
    }

    void writeOutput(std::ostream& out) {
        writeStructured(out, o_{{className}});
    }

    void call({{className}}*& solution);

    ~Method_{{className}}() {
{{#parameters}}
        deletePointer(i_{{name}});
{{/parameters}}
    }
};
{{/constructor}}

struct Test_{{className}} {
    {{className}}* solution;
{{#methods}}
    Method_{{method.name}} method_{{method.name}};
{{/methods}}
{{#constructor}}
    Method_{{className}} method_{{className}};
{{/constructor}}
    Test_{{className}}();
    ~Test_{{className}}();
};

{{/solutionClass}}

}
