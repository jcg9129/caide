name: Linux CI

on:
  push:
    branches: [ master, release, gh-actions ]
  pull_request:
    branches: [ master, release ]
  schedule:
    - cron: '13 9 * * *'

jobs:
  Build_and_Test:
    name: ${{ matrix.os }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        cabal: ["3.4"]
        ghc: ["8.10.7"]
        os: [ubuntu-latest]

    env:
      CAIDE_EXE_RELATIVE_PATH: dist-newstyle/build/x86_64-linux/ghc-${{ matrix.ghc }}/libcaide-2.8.0/build/caide/caide
      CAIDE_CMAKE_CONFIGURE_ARGS: "-GNinja,-DCMAKE_CXX_COMPILER_LAUNCHER=ccache,-DCMAKE_C_COMPILER_LAUNCHER=ccache"
      CONFIG: "--enable-tests --enable-benchmarks --enable-coverage"

    steps:
    - name: Install prerequisites
      env:
        runner_os: ${{ runner.os }}
      shell: python
      run: |
        import os, subprocess
        runner_os = os.environ['runner_os']
        if runner_os == 'Linux':
          commands = ['sudo apt-get install ccache ninja-build', 'which ccache', 'which ninja']
        elif runner_os == 'macOS':
          commands = ['brew install ccache ninja', 'which ccache', 'which ninja']
        else:
          commands = ['choco install ccache ninja', 'where ccache', 'where ninja']
        for cmd in commands:
          subprocess.check_call(cmd.split())

    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - uses: actions/setup-haskell@v1
      id: setup-haskell-cabal
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Create key for ccache
      shell: bash
      run: |
        echo >common.txt
        g++ --version >>common.txt
        ls -l --time-style=long-iso $(readlink -f $(which g++)) >>common.txt
        gcc --version >>common.txt
        ls -l --time-style=long-iso $(readlink -f $(which g++)) >>common.txt
        cpp --version >>common.txt
        ls -l --time-style=long-iso $(readlink -f $(which cpp)) >>common.txt
        cmake --version >>common.txt
        ls -l --time-style=long-iso $(readlink -f $(which cmake)) >>common.txt
        ninja --version >>common.txt
        ls -l --time-style=long-iso $(readlink -f $(which ninja)) >>common.txt
        cp common.txt llvm-submodule.txt
        git -C libcaide/cbits/cpp-inliner submodule status >>llvm-submodule.txt
        cp common.txt submodules.txt
        git submodule status >>submodules.txt
        cat llvm-submodule.txt submodules.txt

    - name: ccache cache
      uses: actions/cache@v2
      env:
        cache-name: ccache
        cache-version: 3
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-build-${{ env.cache-name }}${{ env.cache-version }}-${{ hashFiles('llvm-submodule.txt') }}-${{ hashFiles('submodules.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}${{ env.cache-version }}-${{ hashFiles('llvm-submodule.txt') }}-

    - name: Update cabal index, resolve dependencies and create freeze file
      shell: bash
      run: |
        cd libcaide
        cabal update $CONFIG
        cabal freeze $CONFIG
        cat cabal.project.freeze

    - name: Cabal cache
      uses: actions/cache@v2
      env:
        cache-name: cabal
        cache-version: 1
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          libcaide/dist-newstyle
        key: ${{ runner.os }}-${{ env.cache-name }}${{ env.cache-version }}-${{ matrix.ghc }}-${{ hashFiles('libcaide/cabal.project.freeze') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}${{ env.cache-version }}-${{ matrix.ghc }}-

    - name: Install dependencies
      shell: bash
      run: |
        cd libcaide
        cabal build --only-dependencies $CONFIG

    - name: Build
      shell: bash
      run: |
        ccache --show-stats
        cd libcaide
        # Force recompilation due to https://github.com/haskell/cabal/issues/4746
        echo "--$RANDOM" >> libcaide.cabal
        cabal build $CONFIG all
        strip $CAIDE_EXE_RELATIVE_PATH
        ccache --show-stats

    - name: Publish the executable
      uses: actions/upload-artifact@v1
      with:
        name: caide
        path: libcaide/${{ env.CAIDE_EXE_RELATIVE_PATH }}

    - name: HLint
      shell: bash
      run: |
        cd libcaide
        curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/run.sh | sh -s . || true

    - name: Run tests
      shell: bash
      run: |
        cd libcaide
        export CAIDE=$(pwd)/$CAIDE_EXE_RELATIVE_PATH
        MONO=mono CSC=csc tests/run-tests.sh
        cabal test $CONFIG

